require './ctype.rb'


unknown = BasicType::UNKNOWN
str_ref = RefType::STRING
int_ref = RefType::INT
char = BasicType::INT
int = BasicType::INT
str = BasicType::STRING
void = BasicType::VOID
size_t = BasicType::INT
bool = BasicType::INT
double = BasicType::INT


BUILTINS = {
  # Built-in variables
  cnt: int,
  strsize: int,
  stat: int,
  refstr: str,
  # Built-in functions
  abs: FunctionType.new(int, [int]),
  atan: FunctionType.new(double, [int, int]),
  await: FunctionType.new(void, [int]),
  axobj: FunctionType.new(void, [int, str, int, int]),
  bcopy: FunctionType.new(void, [str, str]),
  bgscr: FunctionType.new(void, [int, int, int, int, int]),
  bload: FunctionType.new(void, [str, GENERIC, size_t, size_t]),
  boxf: FunctionType.new(void, [int, int, int, int]),
  bsave: FunctionType.new(void, [str, GENERIC]),
  buffer: FunctionType.new(void, [int, int, int]),
  chgdisp: FunctionType.new(void, [int, int, int]),
  clrobj: FunctionType.new(void, [int]),
  cnvstow: FunctionType.new(void, [str_ref, str]),
  color: FunctionType.new(void, [int, int, int]),
  delcom: FunctionType.new(void, [int]),
  dialog: FunctionType.new(void, [str, int]),
  dirinfo: FunctionType.new(str, [int]),
  dirlist: FunctionType.new(void, [str_ref, str]),
  elona_delete: FunctionType.new(void, [str]),
  elona_double: FunctionType.new(double, [GENERIC]),
  elona_int: FunctionType.new(int, [GENERIC]),
  elona_str: FunctionType.new(str, [int]),
  exec: FunctionType.new(void, [str, int]),
  exist: FunctionType.new(void, [str]),
  expf: FunctionType.new(double, [double]),
  font: FunctionType.new(void, [str, int, int]),
  gcopy: FunctionType.new(void, [int, int, int, int, int]),
  getkey: FunctionType.new(void, [int_ref, int]),
  getpath: FunctionType.new(str, [str, int]),
  getstr: FunctionType.new(void, [str_ref, str, int, char, int]),
  ginfo: FunctionType.new(int, [int]),
  gmode: FunctionType.new(void, [int, int, int, int]),
  grotate: FunctionType.new(void, [int, int, int, double, int, int]),
  gsel: FunctionType.new(void, [int]),
  gzoom: FunctionType.new(void, [int, int, int, int, int, int, int]),
  instr: FunctionType.new(int, [str, size_t, str]),
  length: FunctionType.new(size_t, [ArrayType.new(GENERIC, 1)]),
  length2: FunctionType.new(size_t, [ArrayType.new(GENERIC, 2)]),
  limit: FunctionType.new(int, [int, int, int]),
  line: FunctionType.new(void, [int, int, int, int]),
  logf: FunctionType.new(double, [double]),
  memcpy: FunctionType.new(void, [GENERIC, GENERIC, size_t, size_t]),
  memexpand: FunctionType.new(void, [GENERIC, size_t]),
  memfile: FunctionType.new(void, [GENERIC]),
  memset: FunctionType.new(void, [GENERIC, int, size_t]),
  mes: FunctionType.new(void, [str]),
  mesbox: FunctionType.new(void, [str_ref, int, int, int, int]),
  mkdir: FunctionType.new(void, [str]),
  mmload: FunctionType.new(void, [str, int, int]),
  mmplay: FunctionType.new(void, [int]),
  mmstop: FunctionType.new(void, []),
  mref: FunctionType.new(void, []),
  noteadd: FunctionType.new(void, [str, int, int]),
  notedel: FunctionType.new(void, [size_t]),
  noteget: FunctionType.new(void, [str_ref, size_t]),
  noteinfo: FunctionType.new(int, [int]),
  noteload: FunctionType.new(void, [str]),
  notesave: FunctionType.new(void, [str]),
  notesel: FunctionType.new(void, [str_ref]),
  noteunsel: FunctionType.new(void, []),
  objmode: FunctionType.new(void, [int, int]),
  objprm: FunctionType.new(void, [int, str]),
  objsel: FunctionType.new(void, [int]),
  peek: FunctionType.new(char, [GENERIC, size_t]),
  pget: FunctionType.new(void, [int, int]),
  picload: FunctionType.new(void, [str, int]),
  poke: FunctionType.new(void, [str_ref, size_t, GENERIC]),
  pos: FunctionType.new(void, [int, int]),
  randomize: FunctionType.new(void, [int]),
  redraw: FunctionType.new(void, [int]),
  rnd: FunctionType.new(int, [int]),
  screen: FunctionType.new(void, [int, int, int, int, int, int]),
  sqrt: FunctionType.new(double, [double]),
  stick: FunctionType.new(void, [int_ref, int]),
  strlen: FunctionType.new(size_t, [str]),
  strmid: FunctionType.new(str, [str, int, int]),
  title: FunctionType.new(void, [str]),
  varptr: FunctionType.new(int, [str]),
  width: FunctionType.new(void, [int]),
  wpeek: FunctionType.new(int, [int, size_t]),
  wpoke: FunctionType.new(void, [int_ref, int, int]),

  # Imported functions
  exrand_randomize: FunctionType.new(void, [int]),
  exrand_rnd: FunctionType.new(void, [int_ref, int]),
  func_1: FunctionType.new(void, [str, int]),
  xnotesel: FunctionType.new(void, [str_ref]),
  xnoteadd: FunctionType.new(void, [str]),
  gfini: FunctionType.new(void, [int, int]),
  gfdec: FunctionType.new(void, [int, int, int]),
  gfdec2: FunctionType.new(void, [int, int, int]),
  gfinc: FunctionType.new(void, [int, int, int]),
  ematan: FunctionType.new(void, [int, int, int]),
  aplsel: FunctionType.new(void, [str]),
  aplobj: FunctionType.new(void, [str, int]),
  apledit: FunctionType.new(void, [int, int, int]),
  func_2: FunctionType.new(void, []),
  zOpen: FunctionType.new(void, [int_ref, str, int, int]),
  zRead: FunctionType.new(void, [GENERIC, int, int]),
  zWrite: FunctionType.new(void, [GENERIC, int, int]),
  zClose: FunctionType.new(void, [int]),
  GetOpenFileNameA: FunctionType.new(void, []),
  GetSaveFileNameA: FunctionType.new(void, []),
  DSINIT: FunctionType.new(void, []),
  DSEND: FunctionType.new(void, []),
  DSRELEASE: FunctionType.new(void, [int]),
  DSLOADFNAME: FunctionType.new(void, [str, int]),
  DSPLAY: FunctionType.new(void, [int, int]),
  DSSTOP: FunctionType.new(void, [int]),
  DSSETVOLUME: FunctionType.new(void, [int, int]),
  DSGETMASTERVOLUME: FunctionType.new(void, []),
  CHECKPLAY: FunctionType.new(void, []),
  DMINIT: FunctionType.new(void, []),
  DMEND: FunctionType.new(void, []),
  DMLOADFNAME: FunctionType.new(void, [str, int]),
  DMPLAY: FunctionType.new(void, [int, int]),
  DMSTOP: FunctionType.new(void, []),
  DIINIT: FunctionType.new(void, []),
  DIGETJOYNUM: FunctionType.new(void, []),
  DIGETJOYSTATE: FunctionType.new(void, [int, int]),
  HMMBITON: FunctionType.new(void, [int_ref, int]),
  HMMBITOFF: FunctionType.new(void, [int_ref, int]),
  HMMBITCHECK: FunctionType.new(void, [int, int]),
  sockopen: FunctionType.new(void, [int, str, int]),
  sockclose: FunctionType.new(void, []),
  sockget: FunctionType.new(void, [str, int]),
  sockput: FunctionType.new(void, []),
  netinit: FunctionType.new(void, []),
  netexec: FunctionType.new(void, [int_ref]),
  neterror: FunctionType.new(void, [str_ref]),
  neturl: FunctionType.new(void, [str]),
  netdlname: FunctionType.new(void, [str]),
  netrequest: FunctionType.new(void, [str]),
  RemoveDirectoryA: FunctionType.new(void, [str]),
  GetLastError: FunctionType.new(void, []),
  CreateMutexA: FunctionType.new(void, [int, int, str]),
  CloseHandle: FunctionType.new(void, [int]),
  func_3: FunctionType.new(void, []),
  LCMapStringA: FunctionType.new(int, [int, int, str, int, str_ref, int]),
  GetUserDefaultLCID: FunctionType.new(int, []),
  water_getimage: FunctionType.new(void, []),
  water_setripple: FunctionType.new(void, [int, int, int, int]),
  water_calc: FunctionType.new(void, []),
  water_draw: FunctionType.new(void, []),
  AppendMenuA: FunctionType.new(void, []),
  CheckMenuRadioItem: FunctionType.new(void, []),
  CreateMenu: FunctionType.new(void, []),
  CreatePopupMenu: FunctionType.new(void, []),
  DrawMenuBar: FunctionType.new(void, []),
  SetMenu: FunctionType.new(void, []),
  keybd_event: FunctionType.new(void, [int, int, int]),
  GetKeyboardState: FunctionType.new(void, [unknown]),
  timeBeginPeriod: FunctionType.new(void, [int]),
  timeEndPeriod: FunctionType.new(void, []),
  timeGetTime: FunctionType.new(int, []),
  ImmGetContext: FunctionType.new(int, [int]),
  ImmReleaseContext: FunctionType.new(void, [int, int]),
  ImmSetOpenStatus: FunctionType.new(void, [int, int]),
  ImmGetOpenStatus: FunctionType.new(int, [int]),

  # Operators
  op__and: FunctionType.new(bool, [bool, bool]),
  op__division: FunctionType.new(int, [int, int]),
  op__equal: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__greater_than: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__greater_than_equal: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__less_than: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__less_than_equal: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__minus: FunctionType.new(int, [int, int]),
  op__modulo: FunctionType.new(int, [int, int]),
  op__multiplication: FunctionType.new(int, [int, int]),
  op__not_equal: OperatorFunctionType.new(:comparison, bool, [GENERIC, GENERIC]),
  op__or: FunctionType.new(bool, [bool, bool]),
  op__plus: OperatorFunctionType.new(:add_or_concat, GENERIC, [GENERIC, GENERIC]),
  op__shift_l: FunctionType.new(int, [int, int]),
  uop__minus: FunctionType.new(int, [int]),

  # Special functions
  DIM1: FunctionType.new(void, [GENERIC]),
  DIM2: FunctionType.new(void, [GENERIC, size_t]),
  DIM3: FunctionType.new(void, [GENERIC, size_t, size_t]),
  DIM4: FunctionType.new(void, [GENERIC, size_t, size_t, size_t]),
  SDIM1: FunctionType.new(void, [GENERIC]),
  SDIM2: FunctionType.new(void, [GENERIC, size_t]),
  SDIM3: FunctionType.new(void, [GENERIC, size_t, size_t]),
  SDIM4: FunctionType.new(void, [GENERIC, size_t, size_t, size_t]),
  dup: FunctionType.new(void, [GENERIC, GENERIC]),

  # Entry point
  main: FunctionType.new(int, []),
}
